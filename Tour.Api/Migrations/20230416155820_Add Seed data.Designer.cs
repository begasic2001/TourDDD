// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tour.Infrastructure.Data;

#nullable disable

namespace Tour.Api.Migrations
{
    [DbContext(typeof(TourDatabaseContext))]
    [Migration("20230416155820_Add Seed data")]
    partial class AddSeeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tour.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Tour.Domain.Entities.CartOrder", b =>
                {
                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<double>("SingleProduct")
                        .HasColumnType("float");

                    b.HasKey("UsersId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("CartOrders");
                });

            modelBuilder.Entity("Tour.Domain.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CityName = "tphcm",
                            CountryId = "1"
                        },
                        new
                        {
                            Id = "2",
                            CityName = "vũng tàu",
                            CountryId = "1"
                        },
                        new
                        {
                            Id = "3",
                            CityName = "tokyo",
                            CountryId = "3"
                        },
                        new
                        {
                            Id = "4",
                            CityName = "bangkok",
                            CountryId = "4"
                        },
                        new
                        {
                            Id = "5",
                            CityName = "seoul",
                            CountryId = "2"
                        },
                        new
                        {
                            Id = "6",
                            CityName = "busan",
                            CountryId = "2"
                        });
                });

            modelBuilder.Entity("Tour.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CountryName = "việt nam"
                        },
                        new
                        {
                            Id = "2",
                            CountryName = "hàn quốc"
                        },
                        new
                        {
                            Id = "3",
                            CountryName = "nhật bản"
                        },
                        new
                        {
                            Id = "4",
                            CountryName = "thái lan"
                        },
                        new
                        {
                            Id = "5",
                            CountryName = "singapor"
                        });
                });

            modelBuilder.Entity("Tour.Domain.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId");

                    b.HasIndex("UsersId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tour.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TourId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Shipping", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ship_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ship_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ship_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ship_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Sight", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SightForMoney")
                        .HasColumnType("float");

                    b.Property<string>("SightName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Sight");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CityId = "1",
                            SightForMoney = 140000.0,
                            SightName = "Đầm Sen"
                        });
                });

            modelBuilder.Entity("Tour.Domain.Entities.Tours", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxTourists")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SightId");

                    b.HasIndex("TransportId");

                    b.ToTable("Tour");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CityId = "1",
                            EndDate = new DateTime(2023, 4, 16, 15, 58, 20, 373, DateTimeKind.Utc).AddTicks(3574),
                            MaxTourists = 50,
                            Name = "Du Lịch TPHCM",
                            Price = 1000000.0,
                            SightId = "1",
                            StartDate = new DateTime(2023, 4, 16, 15, 58, 20, 373, DateTimeKind.Utc).AddTicks(3571),
                            TransportId = "1"
                        });
                });

            modelBuilder.Entity("Tour.Domain.Entities.Transport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transport");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            TransportName = "Xe Khách"
                        });
                });

            modelBuilder.Entity("Tour.Domain.Entities.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Users", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tour.Domain.Entities.CartOrder", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Tours", "Tour")
                        .WithMany("CartOrders")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour.Domain.Entities.Users", "Users")
                        .WithMany("CartOrders")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tour.Domain.Entities.City", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Order", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId");

                    b.HasOne("Tour.Domain.Entities.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId");

                    b.Navigation("Shipping");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tour.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour.Domain.Entities.Tours", "Tour")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Sight", b =>
                {
                    b.HasOne("Tour.Domain.Entities.City", "City")
                        .WithMany("Sights")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Tours", b =>
                {
                    b.HasOne("Tour.Domain.Entities.City", "City")
                        .WithMany("Tours")
                        .HasForeignKey("CityId");

                    b.HasOne("Tour.Domain.Entities.Sight", "Sight")
                        .WithMany("Tours")
                        .HasForeignKey("SightId");

                    b.HasOne("Tour.Domain.Entities.Transport", "Transport")
                        .WithMany("Tours")
                        .HasForeignKey("TransportId");

                    b.Navigation("City");

                    b.Navigation("Sight");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Tour.Domain.Entities.City", b =>
                {
                    b.Navigation("Sights");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Sight", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Tours", b =>
                {
                    b.Navigation("CartOrders");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Transport", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Users", b =>
                {
                    b.Navigation("CartOrders");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
